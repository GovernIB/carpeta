/*
 * API Interna NOTIB
 * API Interna de NOTIB
 *
 * OpenAPI spec version: v2.0
 * Contact: limit@limit.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.fundaciobit.pluginsib.carpetafront.notib2client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Document que s’envia en la comunicació.  * Únicament es pot adjuntar més d’un document en cas de comunicacions a la administració (SIR)
 */
@Schema(description = "Document que s’envia en la comunicació.  * Únicament es pot adjuntar més d’un document en cas de comunicacions a la administració (SIR)")


public class DocumentV2 {
  @JsonProperty("arxiuNom")
  private String arxiuNom = null;

  @JsonProperty("contingutBase64")
  private String contingutBase64 = null;

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("csv")
  private String csv = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("normalitzat")
  private Boolean normalitzat = false;

  /**
   * Enumerat que indica l’origen del document.  * No s’utilitza en el cas de documents passats com a csv o uuid
   */
  public enum OrigenEnum {
    CIUTADA("CIUTADA"),
    ADMINISTRACIO("ADMINISTRACIO");

    private String value;

    OrigenEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static OrigenEnum fromValue(String input) {
      for (OrigenEnum b : OrigenEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("origen")
  private OrigenEnum origen = OrigenEnum.ADMINISTRACIO;

  /**
   * Enumerat que indica el tipus de document.  * No s’utilitza en el cas de documents passats com a csv o uuid
   */
  public enum TipoDocumentalEnum {
    RESSOLUCIO("RESSOLUCIO"),
    ACORD("ACORD"),
    CONTRACTE("CONTRACTE"),
    CONVENI("CONVENI"),
    DECLARACIO("DECLARACIO"),
    COMUNICACIO("COMUNICACIO"),
    NOTIFICACIO("NOTIFICACIO"),
    PUBLICACIO("PUBLICACIO"),
    JUSTIFICANT_RECEPCIO("JUSTIFICANT_RECEPCIO"),
    ACTA("ACTA"),
    CERTIFICAT("CERTIFICAT"),
    DILIGENCIA("DILIGENCIA"),
    INFORME("INFORME"),
    SOLICITUD("SOLICITUD"),
    DENUNCIA("DENUNCIA"),
    ALEGACIO("ALEGACIO"),
    RECURS("RECURS"),
    COMUNICACIO_CIUTADA("COMUNICACIO_CIUTADA"),
    FACTURA("FACTURA"),
    ALTRES_INCAUTATS("ALTRES_INCAUTATS"),
    ALTRES("ALTRES"),
    LLEI("LLEI"),
    MOCIO("MOCIO"),
    INSTRUCCIO("INSTRUCCIO"),
    CONVOCATORIA("CONVOCATORIA"),
    ORDRE_DIA("ORDRE_DIA"),
    INFORME_PONENCIA("INFORME_PONENCIA"),
    DICTAMEN_COMISSIO("DICTAMEN_COMISSIO"),
    INICIATIVA_LEGISLATIVA("INICIATIVA_LEGISLATIVA"),
    PREGUNTA("PREGUNTA"),
    INTERPELACIO("INTERPELACIO"),
    RESPOSTA("RESPOSTA"),
    PROPOSICIO_NO_LLEI("PROPOSICIO_NO_LLEI"),
    ESQUEMA("ESQUEMA"),
    PROPOSTA_RESOLUCIO("PROPOSTA_RESOLUCIO"),
    COMPAREIXENSA("COMPAREIXENSA"),
    SOLICITUD_INFORMACIO("SOLICITUD_INFORMACIO"),
    ESCRIT("ESCRIT"),
    INICIATIVA_LEGISLATIVA2("INICIATIVA_LEGISLATIVA2"),
    PETICIO("PETICIO");

    private String value;

    TipoDocumentalEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TipoDocumentalEnum fromValue(String input) {
      for (TipoDocumentalEnum b : TipoDocumentalEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("tipoDocumental")
  private TipoDocumentalEnum tipoDocumental = TipoDocumentalEnum.NOTIFICACIO;

  /**
   * Enumerat que indica la validesa del document * No s’utilitza en el cas de documents passats com a csv o uuid
   */
  public enum ValidesaEnum {
    COPIA("COPIA"),
    COPIA_AUTENTICA("COPIA_AUTENTICA"),
    ORIGINAL("ORIGINAL");

    private String value;

    ValidesaEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ValidesaEnum fromValue(String input) {
      for (ValidesaEnum b : ValidesaEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("validesa")
  private ValidesaEnum validesa = ValidesaEnum.ORIGINAL;

  @JsonProperty("modoFirma")
  private Boolean modoFirma = null;

  public DocumentV2 arxiuNom(String arxiuNom) {
    this.arxiuNom = arxiuNom;
    return this;
  }

   /**
   * Nom de l’arxiu
   * @return arxiuNom
  **/
  @Schema(example = "document.pdf", required = true, description = "Nom de l’arxiu")
  public String getArxiuNom() {
    return arxiuNom;
  }

  public void setArxiuNom(String arxiuNom) {
    this.arxiuNom = arxiuNom;
  }

  public DocumentV2 contingutBase64(String contingutBase64) {
    this.contingutBase64 = contingutBase64;
    return this;
  }

   /**
   * Contingut del document en Base64.  * Obligatori si no està informat l’enllaç extern, l’uuid o el csv. * Mida màxima 10Mb
   * @return contingutBase64
  **/
  @Schema(example = "JVBERi0xLjYKJcOkw7zDtsOfCjIgMCBv==", description = "Contingut del document en Base64.  * Obligatori si no està informat l’enllaç extern, l’uuid o el csv. * Mida màxima 10Mb")
  public String getContingutBase64() {
    return contingutBase64;
  }

  public void setContingutBase64(String contingutBase64) {
    this.contingutBase64 = contingutBase64;
  }

  public DocumentV2 uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Codi uuid que es pot utilitzar per tal d’obtenir el document imprimible del sistema d’arxiu  * Obligatori si no està informat l’enllaç extern, el contingut en Base64 o el csv.
   * @return uuid
  **/
  @Schema(example = "00000000-0000-0000-0000-000000000000", description = "Codi uuid que es pot utilitzar per tal d’obtenir el document imprimible del sistema d’arxiu  * Obligatori si no està informat l’enllaç extern, el contingut en Base64 o el csv.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public DocumentV2 csv(String csv) {
    this.csv = csv;
    return this;
  }

   /**
   * Codi csv que es pot utilitzar per tal d’obtenir el document imprimible del sistema d’arxiu  * Obligatori si no està informat l’enllaç extern, el contingut en Base64 o l&#x27;uuid.
   * @return csv
  **/
  @Schema(example = "aa10b27d8e221cf923715f01e01f515fa7cfec1322b6b49644a27a00461defea", description = "Codi csv que es pot utilitzar per tal d’obtenir el document imprimible del sistema d’arxiu  * Obligatori si no està informat l’enllaç extern, el contingut en Base64 o l'uuid.")
  public String getCsv() {
    return csv;
  }

  public void setCsv(String csv) {
    this.csv = csv;
  }

  public DocumentV2 url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Enllaç extern on es troba el document de l’enviament.  * Obligatori si no està informat l’uuid, el contingut en Base64 o el csv. * Sistema actualment NO soportat.
   * @return url
  **/
  @Schema(example = "http://server_path/document/123456.pdf", description = "Enllaç extern on es troba el document de l’enviament.  * Obligatori si no està informat l’uuid, el contingut en Base64 o el csv. * Sistema actualment NO soportat.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public DocumentV2 normalitzat(Boolean normalitzat) {
    this.normalitzat = normalitzat;
    return this;
  }

   /**
   * Indica si el document està normalitzat per a la impressió al CIE.   * Només aplica per enviaments postals.
   * @return normalitzat
  **/
  @Schema(example = "false", description = "Indica si el document està normalitzat per a la impressió al CIE.   * Només aplica per enviaments postals.")
  public Boolean isNormalitzat() {
    return normalitzat;
  }

  public void setNormalitzat(Boolean normalitzat) {
    this.normalitzat = normalitzat;
  }

  public DocumentV2 origen(OrigenEnum origen) {
    this.origen = origen;
    return this;
  }

   /**
   * Enumerat que indica l’origen del document.  * No s’utilitza en el cas de documents passats com a csv o uuid
   * @return origen
  **/
  @Schema(example = "ADMINISTRACIO", description = "Enumerat que indica l’origen del document.  * No s’utilitza en el cas de documents passats com a csv o uuid")
  public OrigenEnum getOrigen() {
    return origen;
  }

  public void setOrigen(OrigenEnum origen) {
    this.origen = origen;
  }

  public DocumentV2 tipoDocumental(TipoDocumentalEnum tipoDocumental) {
    this.tipoDocumental = tipoDocumental;
    return this;
  }

   /**
   * Enumerat que indica el tipus de document.  * No s’utilitza en el cas de documents passats com a csv o uuid
   * @return tipoDocumental
  **/
  @Schema(example = "INFORME", description = "Enumerat que indica el tipus de document.  * No s’utilitza en el cas de documents passats com a csv o uuid")
  public TipoDocumentalEnum getTipoDocumental() {
    return tipoDocumental;
  }

  public void setTipoDocumental(TipoDocumentalEnum tipoDocumental) {
    this.tipoDocumental = tipoDocumental;
  }

  public DocumentV2 validesa(ValidesaEnum validesa) {
    this.validesa = validesa;
    return this;
  }

   /**
   * Enumerat que indica la validesa del document * No s’utilitza en el cas de documents passats com a csv o uuid
   * @return validesa
  **/
  @Schema(example = "ORIGINAL", description = "Enumerat que indica la validesa del document * No s’utilitza en el cas de documents passats com a csv o uuid")
  public ValidesaEnum getValidesa() {
    return validesa;
  }

  public void setValidesa(ValidesaEnum validesa) {
    this.validesa = validesa;
  }

  public DocumentV2 modoFirma(Boolean modoFirma) {
    this.modoFirma = modoFirma;
    return this;
  }

   /**
   * Indica, en cas de document pdf, si aquest està firmat electrònicament.  * No s’utilitza en el cas de documents passats com a csv o uuid.
   * @return modoFirma
  **/
  @Schema(example = "false", description = "Indica, en cas de document pdf, si aquest està firmat electrònicament.  * No s’utilitza en el cas de documents passats com a csv o uuid.")
  public Boolean isModoFirma() {
    return modoFirma;
  }

  public void setModoFirma(Boolean modoFirma) {
    this.modoFirma = modoFirma;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentV2 documentV2 = (DocumentV2) o;
    return Objects.equals(this.arxiuNom, documentV2.arxiuNom) &&
        Objects.equals(this.contingutBase64, documentV2.contingutBase64) &&
        Objects.equals(this.uuid, documentV2.uuid) &&
        Objects.equals(this.csv, documentV2.csv) &&
        Objects.equals(this.url, documentV2.url) &&
        Objects.equals(this.normalitzat, documentV2.normalitzat) &&
        Objects.equals(this.origen, documentV2.origen) &&
        Objects.equals(this.tipoDocumental, documentV2.tipoDocumental) &&
        Objects.equals(this.validesa, documentV2.validesa) &&
        Objects.equals(this.modoFirma, documentV2.modoFirma);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arxiuNom, contingutBase64, uuid, csv, url, normalitzat, origen, tipoDocumental, validesa, modoFirma);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentV2 {\n");
    
    sb.append("    arxiuNom: ").append(toIndentedString(arxiuNom)).append("\n");
    sb.append("    contingutBase64: ").append(toIndentedString(contingutBase64)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    csv: ").append(toIndentedString(csv)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    normalitzat: ").append(toIndentedString(normalitzat)).append("\n");
    sb.append("    origen: ").append(toIndentedString(origen)).append("\n");
    sb.append("    tipoDocumental: ").append(toIndentedString(tipoDocumental)).append("\n");
    sb.append("    validesa: ").append(toIndentedString(validesa)).append("\n");
    sb.append("    modoFirma: ").append(toIndentedString(modoFirma)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
