/*
 * API REST EXTERNA de Carpeta
 * Conjunt de Serveis REST de Carpeta per ser accedits des de l'exterior
 *
 * OpenAPI spec version: 1.0.0
 * Contact: governdigital.carpeta@fundaciobit.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package es.caib.carpeta.apicertificats.client.api;

import es.caib.carpeta.apicertificats.client.services.ApiCallback;
import es.caib.carpeta.apicertificats.client.services.ApiClient;
import es.caib.carpeta.apicertificats.client.services.ApiException;
import es.caib.carpeta.apicertificats.client.services.ApiResponse;
import es.caib.carpeta.apicertificats.client.services.Configuration;
import es.caib.carpeta.apicertificats.client.services.Pair;
import es.caib.carpeta.apicertificats.client.services.ProgressRequestBody;
import es.caib.carpeta.apicertificats.client.services.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import es.caib.carpeta.apicertificats.client.model.CertificatBean;
import es.caib.carpeta.apicertificats.client.model.CertificatInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificatsApi {
    private ApiClient apiClient;

    public CertificatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificatsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for descarregarCertificat
     * @param dni DNI o NIF de la persona de la qual volem obtenir el certificat. (required)
     * @param idioma Codi de l&#x27;idioma (required)
     * @param pluginNumber Numero de plugin (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call descarregarCertificatCall(String dni, String idioma, String pluginNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/secure/certificats/descarregarCertificat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dni != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dni", dni));
        if (idioma != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idioma", idioma));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (pluginNumber != null)
        localVarHeaderParams.put("pluginNumber", apiClient.parameterToString(pluginNumber));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call descarregarCertificatValidateBeforeCall(String dni, String idioma, String pluginNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dni' is set
        if (dni == null) {
            throw new ApiException("Missing the required parameter 'dni' when calling descarregarCertificat(Async)");
        }
        // verify the required parameter 'idioma' is set
        if (idioma == null) {
            throw new ApiException("Missing the required parameter 'idioma' when calling descarregarCertificat(Async)");
        }
        
        com.squareup.okhttp.Call call = descarregarCertificatCall(dni, idioma, pluginNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retorna un certificat provinent de un servei extern a CARPETA.
     * 
     * @param dni DNI o NIF de la persona de la qual volem obtenir el certificat. (required)
     * @param idioma Codi de l&#x27;idioma (required)
     * @param pluginNumber Numero de plugin (optional)
     * @return CertificatBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificatBean descarregarCertificat(String dni, String idioma, String pluginNumber) throws ApiException {
        ApiResponse<CertificatBean> resp = descarregarCertificatWithHttpInfo(dni, idioma, pluginNumber);
        return resp.getData();
    }

    /**
     * Retorna un certificat provinent de un servei extern a CARPETA.
     * 
     * @param dni DNI o NIF de la persona de la qual volem obtenir el certificat. (required)
     * @param idioma Codi de l&#x27;idioma (required)
     * @param pluginNumber Numero de plugin (optional)
     * @return ApiResponse&lt;CertificatBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificatBean> descarregarCertificatWithHttpInfo(String dni, String idioma, String pluginNumber) throws ApiException {
        com.squareup.okhttp.Call call = descarregarCertificatValidateBeforeCall(dni, idioma, pluginNumber, null, null);
        Type localVarReturnType = new TypeToken<CertificatBean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retorna un certificat provinent de un servei extern a CARPETA. (asynchronously)
     * 
     * @param dni DNI o NIF de la persona de la qual volem obtenir el certificat. (required)
     * @param idioma Codi de l&#x27;idioma (required)
     * @param pluginNumber Numero de plugin (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call descarregarCertificatAsync(String dni, String idioma, String pluginNumber, final ApiCallback<CertificatBean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = descarregarCertificatValidateBeforeCall(dni, idioma, pluginNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificatBean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for teCertificat
     * @param dni DNI o NIF de la persona de la qual volem saber si t√© certificat. (required)
     * @param pluginNumber Numero de plugin (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call teCertificatCall(String dni, String pluginNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/secure/certificats/teCertificat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dni != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dni", dni));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (pluginNumber != null)
        localVarHeaderParams.put("pluginNumber", apiClient.parameterToString(pluginNumber));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call teCertificatValidateBeforeCall(String dni, String pluginNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dni' is set
        if (dni == null) {
            throw new ApiException("Missing the required parameter 'dni' when calling teCertificat(Async)");
        }
        
        com.squareup.okhttp.Call call = teCertificatCall(dni, pluginNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retorna un CertificatInfo que indica si l&#x27;usuari t√© certificat 
     * 
     * @param dni DNI o NIF de la persona de la qual volem saber si t√© certificat. (required)
     * @param pluginNumber Numero de plugin (optional)
     * @return CertificatInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificatInfo teCertificat(String dni, String pluginNumber) throws ApiException {
        ApiResponse<CertificatInfo> resp = teCertificatWithHttpInfo(dni, pluginNumber);
        return resp.getData();
    }

    /**
     * Retorna un CertificatInfo que indica si l&#x27;usuari t√© certificat 
     * 
     * @param dni DNI o NIF de la persona de la qual volem saber si t√© certificat. (required)
     * @param pluginNumber Numero de plugin (optional)
     * @return ApiResponse&lt;CertificatInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificatInfo> teCertificatWithHttpInfo(String dni, String pluginNumber) throws ApiException {
        com.squareup.okhttp.Call call = teCertificatValidateBeforeCall(dni, pluginNumber, null, null);
        Type localVarReturnType = new TypeToken<CertificatInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retorna un CertificatInfo que indica si l&#x27;usuari t√© certificat  (asynchronously)
     * 
     * @param dni DNI o NIF de la persona de la qual volem saber si t√© certificat. (required)
     * @param pluginNumber Numero de plugin (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call teCertificatAsync(String dni, String pluginNumber, final ApiCallback<CertificatInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = teCertificatValidateBeforeCall(dni, pluginNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificatInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
